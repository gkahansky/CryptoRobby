@model CryptoRobert.Admin.Models.RuleDefinitionModel

@{
	ViewBag.Title = "Edit";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit Rule</h2>

@using (Html.BeginForm("Create", "RuleDefinition"))
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<h4></h4>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		@Html.HiddenFor(model => model.RuleDef.Id)
		@if (Model.RuleDef.Id > 0)
		{
			<div>
				<div class="form-group">
					@Html.LabelFor(model => model.RuleDef.Id, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@Html.TextBoxFor(model => model.RuleDef.Id, new { @readonly = "readonly" })
						@Html.ValidationMessageFor(model => model.RuleDef.Id, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.RuleDef.RuleType, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@Html.TextBoxFor(model => model.RuleDef.RuleType, new { @readonly = "readonly" })
						@Html.ValidationMessageFor(model => model.RuleDef.RuleType, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.RuleDef.Symbol, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@Html.EditorFor(model => model.RuleDef.Symbol, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.RuleDef.Symbol, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.RuleDef.Interval, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@Html.EditorFor(model => model.RuleDef.Interval, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.RuleDef.Interval, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.RuleDef.Retention, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@*@Html.EditorFor(model => model.Retention, new { htmlAttributes = new { @class = "form-control" } })*@
						@Html.TextBoxFor(model => model.RuleDef.Retention, new { @class = "form-control", @type = "number", @step = "1", @min = "0", @max = "20" })
					</div>
				</div>
				
				<div class="form-group">
					@Html.LabelFor(model => model.RuleDef.Retention, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@*@Html.EditorFor(model => model.Retention, new { htmlAttributes = new { @class = "form-control" } })*@
						@Html.TextBoxFor(model => model.RuleDef.Retention, new { @class = "form-control", @type = "number", @step = "1", @min = "0", @max = "20" })
					</div>
				</div>


				<div class="form-group">
					@Html.LabelFor(model => model.RuleDef.RuleSetId, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@*@Html.EditorFor(model => model.Threshold, new { htmlAttributes = new { @class = "form-control" } })*@
						@Html.DropDownListFor(model => model.RuleDef.RuleSetId, new SelectList(Model.RuleSets, "Id", "Name"), "Select RuleSet", new { @class = "form-control" })
						@**@
					</div>
				</div>





				<div class="form-group">
					<div class="col-md-offset-2 col-md-10">
						<input type="submit" value="Save" class="btn btn-default" />
					</div>
				</div>
			</div>
		}
		else
		{
			<h3>Rule Not Found</h3>
		}

	</div>
}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>

